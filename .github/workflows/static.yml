# 用于将静态内容部署到 GitHub Pages 的简单工作流
name: Deploy static content to Pages

on:
  # 在推送到默认分支时运行
  push:
    branches: ["main"]

  # 允许您从“操作”选项卡手动运行此工作流
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限以允许部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许一次并发部署，跳过在进行中的运行和最新排队的运行之间排队的运行。
# 但是，不要取消进行中的运行，因为我们希望允许这些生产部署完成。
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 构建任务
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      # ===================================================================
      # ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼【 这是您需要修改的核心部分 】▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼
      #
      #  如果您的项目是基于 Node.js (如 React, Vue, Svelte)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # 或者您需要的 Node.js 版本
      - name: Install and Build
        run: |
          npm ci # 推荐使用 npm ci 以获得更快、更可靠的安装
          npm run build # 运行您在 package.json 中定义的构建脚本
      #
      #  如果您的项目是 Flutter Web, 请取消注释下面的步骤并替换上面的步骤
      # - name: Setup Flutter
      #   uses: subosito/flutter-action@v2
      #   with:
      #     channel: 'stable'
      # - name: Build Flutter Web
      #   run: flutter build web
      #
      # ▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲【 根据您的项目类型选择并修改 】▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲
      # ===================================================================

      - name: Setup Pages
        uses: actions/configure-pages@v5
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # 上传构建后生成的文件夹
          # 常见的文件夹名有: build, dist, out。请根据您项目的实际情况修改!
          # 对于 Flutter Web，这个路径通常是 'build/web'
          path: './build' 

  # 部署任务
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build # 确保在 build 任务成功后才运行
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
